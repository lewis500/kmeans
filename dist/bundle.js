(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Centroid, Ctrl, Dot, _, angular, d3, euclid, visDer;

angular = require('angular');

d3 = require('d3');

_ = require('lodash');

euclid = function(a, b) {
  return Math.pow(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2), 0.5);
};

Centroid = (function() {
  function Centroid(x, y) {
    this.x = x;
    this.y = y;
    _.assign(this, {
      id: _.uniqueId(),
      dots: []
    });
  }

  Centroid.prototype.addDot = function(dot) {
    return this.dots.push(dot);
  };

  Centroid.prototype.clear = function() {
    return this.dots = [];
  };

  Centroid.prototype.move = function() {
    var l, ref, sumX, sumY;
    ref = [0, 0], sumX = ref[0], sumY = ref[1];
    this.dots.forEach(function(d) {
      sumX += d.x;
      return sumY += d.y;
    });
    l = this.dots.length;
    if (l > 0) {
      this.x = sumX / l;
      return this.y = sumY / l;
    } else {
      this.x = Math.random() * 100;
      return this.y = Math.random() * 100;
    }
  };

  return Centroid;

})();

Dot = (function() {
  function Dot(x, y) {
    this.x = x;
    this.y = y;
    _.assign(this, {
      centroid: null,
      d: 1000,
      id: _.uniqueId()
    });
  }

  Dot.prototype.update = function(d1, centroid1) {
    this.d = d1;
    this.centroid = centroid1;
  };

  return Dot;

})();

Ctrl = (function() {
  function Ctrl(scope, el) {
    this.scope = scope;
    this.makeDots();
    this.makeCentroids(this.dots);
  }

  Ctrl.prototype.makeCentroids = function(dots) {
    return this.centroids = _.sample(dots, 5).map((function(_this) {
      return function(centroid) {
        var c, distances, draw, i, intervals, q, ss;
        ss = 0;
        distances = dots.map(function(dot) {
          var d;
          d = euclid(dot, centroid);
          ss += Math.pow(d, 2);
          return d;
        });
        q = 0;
        intervals = distances.map(function(d) {
          return q += (Math.pow(d, 2)) / ss;
        });
        draw = Math.random();
        i = _.findLastIndex(intervals, function(d) {
          return d < draw;
        });
        c = dots[i];
        return new Centroid(c.x, c.y);
      };
    })(this));
  };

  Ctrl.prototype.gen = function(mean, std) {
    var res;
    res = d3.random.normal(mean, std)();
    return Math.max(Math.min(res, 100), 0);
  };

  Ctrl.prototype.makeDots = function() {
    this.dots = [];
    _.range(0, 30).forEach((function(_this) {
      return function() {
        return _this.dots.push(new Dot(_this.gen(20, 5), _this.gen(20, 8)));
      };
    })(this));
    _.range(0, 100).forEach((function(_this) {
      return function() {
        return _this.dots.push(new Dot(_this.gen(85, 7), _this.gen(75, 7)));
      };
    })(this));
    _.range(0, 100).forEach((function(_this) {
      return function() {
        return _this.dots.push(new Dot(_this.gen(80, 7), _this.gen(15, 3)));
      };
    })(this));
    _.range(0, 75).forEach((function(_this) {
      return function() {
        return _this.dots.push(new Dot(_this.gen(40, 7), _this.gen(80, 3)));
      };
    })(this));
    return _.range(0, 75).forEach((function(_this) {
      return function() {
        return _this.dots.push(new Dot(_this.gen(50, 3), _this.gen(40, 3)));
      };
    })(this));
  };

  Ctrl.prototype.update = function() {
    _.invoke(this.centroids, 'clear');
    this.dots.forEach((function(_this) {
      return function(dot) {
        return _.chain(_this.centroids).map(function(centroid) {
          var res;
          return res = {
            distance: euclid(dot, centroid),
            centroid: centroid
          };
        }).min('distance').value().centroid.addDot(dot);
      };
    })(this));
    _.invoke(this.centroids, 'move');
    return this.scope.$evalAsync();
  };

  Ctrl.prototype.vor = d3.geom.voronoi().x(function(d) {
    return d.x;
  }).y(function(d) {
    return d.y;
  }).clipExtent([[0, 0], [100, 100]]);

  Ctrl.prototype.vorPaths = function() {
    var data, res;
    data = this.vor(this.centroids);
    return res = data.map(function(d) {
      return 'M' + d.join('L') + 'Z';
    });
  };

  return Ctrl;

})();

visDer = function() {
  var directive;
  return directive = {
    scope: {},
    controllerAs: 'vm',
    templateUrl: './dist/vis.html',
    controller: ['$scope', '$element', Ctrl]
  };
};

angular.module('mainApp', []).directive('visDer', visDer);



},{"angular":undefined,"d3":undefined,"lodash":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
